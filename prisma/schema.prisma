// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OBSERVER        // Observadores entrenados (prioridad alta)
  VOLUNTEER       // Voluntarios generales (prioridad baja)
  ADMIN           // Administradores del sistema
}

enum UserStatus {
  PENDING         // Esperando aprobación
  APPROVED        // Aprobado y activo
  REJECTED        // Rechazado
  SUSPENDED       // Suspendido temporalmente
}

enum ElectionLevel {
  PRESIDENTIAL
  LEGISLATIVE
  MUNICIPAL
}

enum TransmissionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CLOSED
  FAILED
}

enum AuditLogAction {
  LOGIN
  LOGOUT
  START_ESCRUTINIO
  SUBMIT_RESULTS
  UPLOAD_EVIDENCE
  CORRECTION
  TRANSMISSION
  VIEW_RESULTS
  USER_APPROVED
  USER_REJECTED
  USER_SUSPENDED
  CLOSE_ESCRUTINIO
  EDIT_ESCRUTINIOPerfec
  REOPEN_ESCRUTINIO
  CANCEL_ESCRUTINIO
  CREATE_SESSION
  ACTIVATE_SESSION
  CLOSE_SESSION
  UPDATE_JRVS
  HIDE_GPS
  SHOW_GPS
}

enum PapeletaStatus {
  OPEN
  CLOSED
  ANULADA
}

model User {
  id              String      @id @default(cuid())
  email           String      @unique
  password        String
  name            String
  role            UserRole    @default(VOLUNTEER)
  status          UserStatus  @default(PENDING)
  deviceId        String?     @unique // Un dispositivo por usuario
  
  // Información adicional para aprobación
  phone           String?
  organization    String?
  notes           String?     // Notas del admin sobre el usuario
  
  // Metadatos de aprobación
  approvedAt      DateTime?
  approvedBy      String?     // ID del admin que aprobó
  rejectedAt      DateTime?
  rejectedBy      String?     // ID del admin que rechazó
  rejectionReason String?
  
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relaciones
  escrutinios     Escrutinio[]
  auditLogs       AuditLog[]
  offlineQueue    OfflineQueue[]
  rateLimit       UserRateLimit?
  checkpoints     EscrutinioCheckpoint[]
  
  // Relaciones auto-referenciales para aprobación
  approvedByUser  User?       @relation("UserApproval", fields: [approvedBy], references: [id])
  rejectedByUser  User?       @relation("UserRejection", fields: [rejectedBy], references: [id])
  approvedUsers   User[]      @relation("UserApproval")
  rejectedUsers   User[]      @relation("UserRejection")
  
  // Relaciones para sesiones
  closedSessions  EscrutinioSession[]
  
  @@map("users")
}

model Election {
  id              String         @id @default(cuid())
  name            String
  description     String?
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relaciones
  candidates      Candidate[]
  escrutinios     Escrutinio[]
  
  @@map("elections")
}

model Candidate {
  id              String    @id @default(cuid())
  name            String
  party           String
  number          Int
  electionId      String
  electionLevel   ElectionLevel
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relaciones
  election        Election  @relation(fields: [electionId], references: [id])
  votes           Vote[]
  
  @@unique([electionId, number, electionLevel])
  @@map("candidates")
}

model Mesa {
  id              String    @id @default(cuid())
  number          String    @unique // JRV number
  location        String
  address         String?
  department      String    // Departamento de la JRV
  municipality    String?   // Municipio
  area            String?   // Área (urbana/rural)
  electoralLoad   Int?      // Carga electoral
  latitude        Float?
  longitude       Float?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relaciones
  escrutinios     Escrutinio[]
  
  @@map("mesas")
}

model Department {
  id              String    @id @default(cuid())
  name            String    @unique // Nombre del departamento
  code            Int?      // Código del departamento
  diputados       Int       @default(0) // Número de diputados
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("departments")
}

model EscrutinioSession {
  id              String    @id @default(cuid())
  name            String    // "Test 01", "Elecciones Presidenciales Nov 2025"
  description     String?
  isActive        Boolean   @default(false)  // Solo una puede estar activa
  isClosed        Boolean   @default(false)
  isTest          Boolean   @default(false)  // Marcar sesión como prueba
  
  startedAt       DateTime  @default(now())
  closedAt       DateTime?
  closedBy        String?   // Admin que cerró
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relaciones
  escrutinios     Escrutinio[]
  closedByUser    User?     @relation(fields: [closedBy], references: [id])
  
  @@map("escrutinio_sessions")
}

model Escrutinio {
  id              String              @id @default(cuid())
  userId          String
  electionId      String
  mesaId          String
  sessionId       String
  electionLevel   ElectionLevel
  
  // Geolocalización
  latitude        Float
  longitude       Float
  locationAccuracy Float?
  
  // GPS final (cuando se congela/cierra)
  finalLatitude         Float?
  finalLongitude        Float?
  finalLocationAccuracy Float?
  
  // Privacidad de ubicación
  gpsHidden          Boolean   @default(false)
  gpsHiddenReason    String?
  gpsHiddenBy        String?   // Admin que ocultó
  gpsHiddenAt        DateTime?
  
  // Estados
  status          TransmissionStatus  @default(PENDING)
  isCompleted     Boolean            @default(false)
  
  // Metadatos
  startedAt       DateTime           @default(now())
  completedAt     DateTime?
  transmittedAt   DateTime?
  
  // Evidencia
  actaImageUrl    String?
  actaImageHash   String?
  
  // Validación
  validationHash  String?
  encryptedData   String?
  
  // Sistema de prioridad y cola
  priority        Int                @default(0) // 0 = normal, 1 = alta (observadores)
  
  // Seguimiento de versiones para edits
  originalData    Json?              // Datos originales antes del primer close
  hasEdits        Boolean            @default(false) // Indica si ha sido editado después de cerrar
  editCount       Int                @default(0) // Número de veces que ha sido editado
  queuePosition   Int?               // Posición en cola si hay congestión
  
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  
  // Relaciones
  user            User               @relation(fields: [userId], references: [id])
  election        Election           @relation(fields: [electionId], references: [id])
  mesa            Mesa               @relation(fields: [mesaId], references: [id])
  session         EscrutinioSession  @relation(fields: [sessionId], references: [id])
  votes           Vote[]
  corrections     Correction[]
  papeletas       Papeleta[]
  checkpoints     EscrutinioCheckpoint[]
  
  @@unique([userId, sessionId, mesaId, electionLevel])
  @@map("escrutinios")
}

model EscrutinioCheckpoint {
  id              String    @id @default(cuid())
  escrutinioId    String
  userId          String
  action          String    // 'FREEZE' o 'UNFREEZE'
  votesSnapshot   Json      // Snapshot de los votos en ese momento
  timestamp       DateTime  @default(now())
  
  // Metadatos adicionales
  deviceId        String?
  gpsLatitude     Float?
  gpsLongitude    Float?
  gpsAccuracy     Float?
  
  createdAt       DateTime  @default(now())
  
  // Relaciones
  escrutinio      Escrutinio @relation(fields: [escrutinioId], references: [id], onDelete: Cascade)
  user            User       @relation(fields: [userId], references: [id])
  
  @@map("escrutinio_checkpoints")
}

model Vote {
  id              String    @id @default(cuid())
  escrutinioId    String
  candidateId     String
  count           Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relaciones
  escrutinio      Escrutinio @relation(fields: [escrutinioId], references: [id], onDelete: Cascade)
  candidate       Candidate  @relation(fields: [candidateId], references: [id])
  
  @@unique([escrutinioId, candidateId])
  @@map("votes")
}

model Correction {
  id              String    @id @default(cuid())
  escrutinioId    String
  candidateId     String
  oldValue        Int
  newValue        Int
  reason          String?
  timestamp       DateTime  @default(now())
  
  // Relaciones
  escrutinio      Escrutinio @relation(fields: [escrutinioId], references: [id])
  
  @@map("corrections")
}

model AuditLog {
  id              String         @id @default(cuid())
  userId          String?
  action          AuditLogAction
  description     String
  metadata        Json?
  ipAddress       String?
  userAgent       String?
  timestamp       DateTime       @default(now())
  
  // Relaciones
  user            User?          @relation(fields: [userId], references: [id])
  
  @@map("audit_logs")
}

model Papeleta {
  id              String         @id @default(cuid())
  escrutinioId    String
  userId          String
  status          PapeletaStatus @default(OPEN)
  votesBuffer     Json           @default("[]") // Array de {partyId, casillaNumber, timestamp}
  
  // Timestamps
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  closedAt        DateTime?
  anuladaAt       DateTime?
  anuladaReason   String?
  
  // Relaciones
  escrutinio      Escrutinio     @relation(fields: [escrutinioId], references: [id], onDelete: Cascade)
  
  @@map("papeletas")
}

model SystemConfig {
  id              String    @id @default(cuid())
  key             String    @unique
  value           String
  description     String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("system_config")
}

// Nueva tabla para manejar cola de uploads offline
model OfflineQueue {
  id              String    @id @default(cuid())
  userId          String
  action          String    // 'upload_image', 'submit_votes', etc.
  data            Json      // Datos a procesar cuando regrese conexión
  priority        Int       @default(0) // 0 = normal, 1 = alta
  retryCount      Int       @default(0)
  maxRetries      Int       @default(3)
  status          String    @default("pending") // pending, processing, completed, failed
  error           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  processedAt     DateTime?
  
  // Relaciones
  user            User      @relation(fields: [userId], references: [id])
  
  @@map("offline_queue")
}

// Nueva tabla para rate limiting por usuario
model UserRateLimit {
  id              String    @id @default(cuid())
  userId          String    @unique
  requests        Int       @default(0)
  windowStart     DateTime  @default(now())
  lastRequest     DateTime  @default(now())
  isBlocked       Boolean   @default(false)
  blockedUntil    DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relaciones
  user            User      @relation(fields: [userId], references: [id])
  
  @@map("user_rate_limits")
} 